def get_transfer_types(client) -> list:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
    return [tr.type for tr in client.transfers]

def classify_client_perfect(client) -> str:
    """
    –ò–î–ï–ê–õ–¨–ù–ê–Ø –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü–û–õ–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ + –¥–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    top_categories = [cat["category"] for cat in client.top4_categories[:3]]
    all_categories = [cat["category"] for cat in client.top4_categories]  # –í–°–ï —Ç–æ–ø-4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    balance = client.avg_monthly_balance_KZT
    age = client.age
    status = client.status
    transfer_types = get_transfer_types(client)
    
    # üîç 1. –°–ù–ê–ß–ê–õ–ê - –ê–ë–°–û–õ–Æ–¢–ù–´–ï –°–ò–ì–ù–ê–õ–´
    if "fx_buy" in transfer_types:
        return "–û–±–º–µ–Ω –≤–∞–ª—é—Ç"
    if "invest_out" in transfer_types:
        return "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    if "deposit_topup_out" in transfer_types:
        return "–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π"
    if "gold_buy_out" in transfer_types or "gold_sell_in" in transfer_types:
        return "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏"
    if "cc_repayment_out" in transfer_types:
        return "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
    if "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è" in all_categories:
        return "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"

    # üíé 2. –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê –ù–ê –û–°–ù–û–í–ï –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–•

    # –ü—Ä–æ–¥—É–∫—Ç: –î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π (KZT/USD/RUB/EUR)
    # ‚óè  –°—Ç–∞–≤–∫–∞: 14,50%.
    # ‚óè  –î–æ—Å—Ç—É–ø: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
    # ‚óè  –ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: —Ö—Ä–∞–Ω–∏—Ç—å/—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–µ–Ω—å–≥–∞–º.
    if "fx_buy" in transfer_types and balance > 500000: # Strong signal for currency management
        return "–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π"
    
    # –ü—Ä–æ–¥—É–∫—Ç: –î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π (–∑–∞—â–∏—Ç–∞ KDIF)
    # ‚óè  –°—Ç–∞–≤–∫–∞: 16,50%.
    # ‚óè  –î–æ—Å—Ç—É–ø: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ—Ç, —Å–Ω—è—Ç–∏–µ ‚Äî –Ω–µ—Ç (–¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞).
    # ‚óè  –ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ¬´–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å¬ª —Å—Ä–µ–¥—Å—Ç–≤–∞.
    if balance > 1000000 and age >= 50: # Higher balance and age for "frozen" funds
        return "–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π"

    # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π vs –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π) - –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if balance > 700000:
        if age >= 45:
            return "–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π"
        else:
            return "–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π"

    # --- –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù: –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ + –°—Ç–∏–ª—å –∂–∏–∑–Ω–∏ ---
    loan_payment_amount = client.totals_by_transfer.get('loan_payment_out_out', 0.0)
    total_spending = client.total_transactions
    loan_ratio = (loan_payment_amount / total_spending) * 100 if total_spending > 0 else 0

    # –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å–æ–∫–∞—è (>25%), —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    if loan_ratio > 25:
        # –°—á–∏—Ç–∞–µ–º "–¥–æ–º–∞—à–Ω–∏–µ" –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏
        at_home_categories = ["–ï–¥–∏–º –¥–æ–º–∞", "–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞", "–ò–≥—Ä–∞–µ–º –¥–æ–º–∞"]
        at_home_count = sum(1 for cat in all_categories if cat in at_home_categories)
        
        # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ 2+ "–¥–æ–º–∞—à–Ω–∏–µ" –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —ç—Ç–æ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏
        if at_home_count >= 2:
            return "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
        else:
            # –ò–Ω–∞—á–µ, —ç—Ç–æ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏
            return "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏"
    
    # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ö–∞—Ä—Ç—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π: —Ç–∞–∫—Å–∏+–æ—Ç–µ–ª–∏+–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ç—Ä–∞—Ç
    travel_categories = ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–û—Ç–µ–ª–∏", "–¢–∞–∫—Å–∏"]
    travel_spending = sum(client.totals_by_category.get(cat, 0) for cat in travel_categories)
    total_spending = client.total_transactions
    travel_percentage = (travel_spending / total_spending) * 100 if total_spending > 0 else 0

    if travel_percentage > 30: # If travel-related spending is a significant portion (e.g., > 30%)
        return "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"

    # Existing rules as fallback or additional signals
    has_strong_travel_signal = any(cat in all_categories for cat in ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–û—Ç–µ–ª–∏"])
    has_foreign_currency = any(t.currency != 'KZT' for t in client.transactions)
    is_affluent_proxy = (balance > 1300000 and status == "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
    if has_strong_travel_signal or has_foreign_currency or is_affluent_proxy:
        return "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
    
    # fallback –¥–ª—è –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    if balance <= 90000 and age <= 38:
        return "–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π fallback
    return "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"

def calculate_pattern_score(client, product: str) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ + –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    
    top_categories = [cat["category"] for cat in client.top4_categories[:3]]
    all_categories = [cat["category"] for cat in client.top4_categories]
    balance = client.avg_monthly_balance_KZT
    age = client.age
    status = client.status
    score = 0.0
    
    if product == "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞":
        if "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è" in all_categories:
            score += 100  # 100% —Å–∏–≥–Ω–∞–ª - —É–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Å!
        if balance > 2000000:
            score += 30
        if age > 40:
            score += 20

    elif product == "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π":
        # –£—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        travel_indicators = ["–û—Ç–µ–ª–∏", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]
        travel_score = sum(50 for cat in travel_indicators if cat in all_categories)  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –≤–µ—Å!
        score += travel_score
        
        if "–¢–∞–∫—Å–∏" in all_categories:
            score += 40
        if 200000 < balance < 1000000:
            score += 20

        # New rule: score based on travel spending percentage
        travel_categories = ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–û—Ç–µ–ª–∏", "–¢–∞–∫—Å–∏"]
        travel_spending = sum(client.totals_by_category.get(cat, 0) for cat in travel_categories)
        total_spending = client.total_transactions
        travel_percentage = (travel_spending / total_spending) * 100 if total_spending > 0 else 0

        if travel_percentage > 40: # High percentage of travel spending
            score += 80 # Very strong signal
        elif travel_percentage > 20:
            score += 40
            
    elif product == "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞":
        # –î–æ–º–∞—à–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        online_cats = ["–ï–¥–∏–º –¥–æ–º–∞", "–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞", "–ò–≥—Ä–∞–µ–º –¥–æ–º–∞"]
        online_score = sum(40 for cat in online_cats if cat in all_categories)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Å!
        score += online_score
        if age < 30:
            score += 20
        if balance < 200000:
            score += 15
            
    elif product == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        if balance > 2000000:
            score += 40
        if age < 40:
            score += 30
        if status == "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç":
            score += 30
            
    elif product == "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏":
        if balance > 1500000:
            score += 35
        if age >= 45:
            score += 35
        if status == "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç":
            score += 30
            
    elif product == "–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π":
        # –ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ¬´–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å¬ª —Å—Ä–µ–¥—Å—Ç–≤–∞.
        if age >= 39 and balance >= 800000:
            score += 50
        if "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã" in all_categories and "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è" in all_categories:
            score += 40
        if status == "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç" and balance > 3000000:
            score += 50
        if "–ê–ó–°" in all_categories:
            score -= 20
        # New rule: higher score for older clients with very high balance, indicating "frozen" funds
        if age >= 50 and balance > 1500000:
            score += 60 # Stronger signal for long-term savings

            
    elif product == "–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π":
        # –ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: —Ö—Ä–∞–Ω–∏—Ç—å/—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–µ–Ω—å–≥–∞–º.
        if 29 <= age <= 45 and 700000 <= balance <= 2500000:
            score += 50
        if "–ê–ó–°" in all_categories:
            score += 40
        if any(cat in all_categories for cat in ["–ö–∏–Ω–æ", "–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞", "–ò–≥—Ä–∞–µ–º –¥–æ–º–∞"]):
            score += 40
        if len(set(all_categories)) >= 5:
            score += 30
        # New rule: strong signal for currency exchange activity
        if "fx_buy" in transfer_types:
            score += 70 # Very strong signal for multicurrency
            
    elif product == "–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π":
        # –û—Ç–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–∏–∑–∫–æ–±–∞–ª–∞–Ω—Å–æ–≤—ã—Ö!
        if "–û—Ç–µ–ª–∏" in all_categories and balance < 700000:
            score += 70  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        if balance < 150000:
            score += 40
        if status == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç":
            score += 30
        if age < 40:
            score += 30
            
    elif product == "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏":
        if balance <= 150000 and status in ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"]:
            score += 50
        if 30 <= age <= 40:
            score += 30
        if "–û—Ç–µ–ª–∏" in all_categories or "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" in all_categories:
            score += 40
        if "–ê–ó–°" in all_categories and "–¢–∞–∫—Å–∏" in all_categories:
            score += 30
        if client.avg_check < 7000:
            score += 40

            
    elif product == "–û–±–º–µ–Ω –≤–∞–ª—é—Ç":
        if 200000 < balance < 800000:
            score += 35
        if 30 <= age <= 40:
            score += 35
        if status in ["–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"]:
            score += 30
    
    return score

def choose_best_product_smart(client) -> tuple[str, float]:
    """
    –ò–î–ï–ê–õ–¨–ù–´–ô –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ground truth
    """
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    best_product = classify_client_perfect(client)
    
    # –£—Å–ª–æ–≤–Ω–∞—è –≤—ã–≥–æ–¥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    benefit = 1000.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö
    
    return best_product, benefit
